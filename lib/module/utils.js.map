{"version":3,"sources":["utils.ts"],"names":["MimeTypes","Utils","file","replace","fileName","substr","lastIndexOf","ext","getExtension","extension","toLowerCase","type","Object","entries","find","mime","sortData","data","objects","filePath","text","weblink","mimeType","contentUri","startsWith","object","files","JSON","parse","i","length","path","obj","getFileName","getMimeType","push","error"],"mappings":"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","sourcesContent":["import type { IReturnData, IUtils } from './ReceiveSharingIntent.interfaces';\nimport MimeTypes from './mimeTypes';\n\nclass Utils implements IUtils {\n  sortData(data: any): Array<IReturnData> {\n    const objects: IReturnData = {\n      filePath: null,\n      text: null,\n      weblink: null,\n      mimeType: null,\n      contentUri: null,\n      fileName: null,\n      extension: null,\n    };\n    const file = data;\n    if (file.startsWith('text:')) {\n      const text = file.replace('text:', '');\n      if (text.startsWith('http')) {\n        const object: Array<IReturnData> = [{ ...objects, weblink: text }];\n        return object;\n      }\n      let object = [{ ...objects, text: text }];\n      return object;\n    } else if (file.startsWith('webUrl:')) {\n      const weblink: string = file.replace('webUrl:', '');\n      const object: Array<IReturnData> = [{ ...objects, weblink: weblink }];\n      return object;\n    } else {\n      try {\n        const files = JSON.parse(file);\n        const object = [];\n        for (let i = 0; i < files.length; i++) {\n          const path = files[i].path;\n          const obj = {\n            ...objects,\n            fileName: this.getFileName(path),\n            extension: this.getExtension(path),\n            mimeType: this.getMimeType(path),\n            filePath: path,\n          };\n          object.push(obj);\n        }\n        return object;\n      } catch (error) {\n        return [{ ...objects }];\n      }\n    }\n  }\n\n  getFileName = (file: string): string => {\n    return file.replace(/^.*(\\\\|\\/|:)/, '');\n  };\n\n  getExtension = (fileName: string): string => {\n    return fileName.substr(fileName.lastIndexOf('.') + 1);\n  };\n\n  getMimeType = (file: string): string => {\n    const ext = this.getExtension(file);\n    const extension = '.' + ext.toLowerCase();\n    const type = Object.entries(MimeTypes).find(\n      (mime) => mime[0] === extension\n    );\n    if (type) return type[0];\n    return '';\n  };\n}\n\nexport default Utils;\n"]}