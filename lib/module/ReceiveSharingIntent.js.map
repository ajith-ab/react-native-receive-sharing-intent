{"version":3,"sources":["ReceiveSharingIntent.ts"],"names":["Platform","Linking","AppState","NativeModules","Utils","ReceiveSharingIntent","ReceiveSharingIntentModule","OS","getReceivedFiles","handler","errorHandler","protocol","isIos","getInitialURL","then","res","startsWith","isClear","getFileNames","catch","addEventListener","url","status","clearReceivedFiles","data","media","text","urls","JSON","parse","map","file","filePath","path","fileName","utils","getFileName","extension","getExtension","mimeType","getMimeType","weblink","contentUri","t","e","fileObject","files","Object","keys","k"],"mappings":"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","sourcesContent":["import type {\n  IReceiveSharingIntent,\n  IUtils,\n} from './ReceiveSharingIntent.interfaces';\nimport { Platform, Linking, AppState, NativeModules } from 'react-native';\nimport Utils from './utils';\n\nconst { ReceiveSharingIntent } = NativeModules;\n\nclass ReceiveSharingIntentModule implements IReceiveSharingIntent {\n  private isIos: boolean = Platform.OS === 'ios';\n  private utils: IUtils = new Utils();\n  private isClear: boolean = false;\n\n  getReceivedFiles(\n    handler: Function,\n    errorHandler: Function,\n    protocol: string = 'ShareMedia'\n  ) {\n    if (this.isIos) {\n      Linking.getInitialURL()\n        .then((res: any) => {\n          if (res && res.startsWith(`${protocol}://dataUrl`) && !this.isClear) {\n            this.getFileNames(handler, errorHandler, res);\n          }\n        })\n        .catch(() => {});\n      Linking.addEventListener('url', (res: any) => {\n        const url = res ? res.url : '';\n        if (url.startsWith(`${protocol}://dataUrl`) && !this.isClear) {\n          this.getFileNames(handler, errorHandler, res.url);\n        }\n      });\n    } else {\n      AppState.addEventListener('change', (status: string) => {\n        if (status === 'active' && !this.isClear) {\n          this.getFileNames(handler, errorHandler, '');\n        }\n      });\n      if (!this.isClear) this.getFileNames(handler, errorHandler, '');\n    }\n  }\n\n  clearReceivedFiles() {\n    this.isClear = true;\n  }\n\n  protected getFileNames(\n    handler: Function,\n    errorHandler: Function,\n    url: string\n  ) {\n    if (this.isIos) {\n      ReceiveSharingIntent.getFileNames(url)\n        .then((data: string) => {\n          const { media, text, urls } = JSON.parse(data) as {\n            media: { path: string }[];\n            text: string[];\n            urls: string[];\n          };\n          handler([\n            ...media.map((file: any) => ({\n              filePath: file.path,\n              fileName: this.utils.getFileName(file.path),\n              extension: this.utils.getExtension(file.path),\n              mimeType: this.utils.getMimeType(file.path),\n              text: null,\n              weblink: null,\n              contentUri: null,\n            })),\n            ...text.map((t) => ({\n              filePath: null,\n              fileName: null,\n              extension: null,\n              mimeType: null,\n              weblink: null,\n              contentUri: null,\n              text: t,\n            })),\n            ...urls.map((weblink) => ({\n              filePath: null,\n              fileName: null,\n              extension: null,\n              mimeType: null,\n              weblink,\n              contentUri: null,\n              text: null,\n            })),\n          ]);\n        })\n        .catch((e: any) => errorHandler(e));\n    } else {\n      ReceiveSharingIntent.getFileNames()\n        .then((fileObject: any) => {\n          let files = Object.keys(fileObject).map((k) => fileObject[k]);\n          handler(files);\n        })\n        .catch((e: any) => errorHandler(e));\n    }\n  }\n}\n\nexport default ReceiveSharingIntentModule;\n"]}