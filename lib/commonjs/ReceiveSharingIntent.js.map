{"version":3,"sources":["ReceiveSharingIntent.ts"],"names":["ReceiveSharingIntent","NativeModules","ReceiveSharingIntentModule","Platform","OS","Utils","getReceivedFiles","handler","errorHandler","protocol","isIos","Linking","getInitialURL","then","res","startsWith","isClear","getFileNames","catch","addEventListener","url","AppState","status","clearReceivedFiles","clearFileNames","data","files","utils","sortData","filesToShare","file","fileName","processedIOSFiles","includes","push","console","log","e","fileObject","Object","keys","map","k"],"mappings":"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","sourcesContent":["import type { IReceiveSharingIntent, IUtils } from \"./ReceiveSharingIntent.interfaces\";\nimport { Platform, Linking, AppState, NativeModules } from \"react-native\";\nimport  Utils from \"./utils\";\n\nconst { ReceiveSharingIntent } = NativeModules;\n\nclass ReceiveSharingIntentModule implements IReceiveSharingIntent {\n    private isIos: boolean = Platform.OS === \"ios\";\n    private utils: IUtils = new Utils();\n    private isClear: boolean = false;\n    private processedIOSFiles: string[] = [];\n\n    getReceivedFiles(handler: Function, errorHandler: Function, protocol: string = \"ShareMedia\"){\n        if(this.isIos){\n            Linking.getInitialURL().then((res:any) => {\n                if (res && res.startsWith(`${protocol}://dataUrl`) && !this.isClear) {\n                    this.getFileNames(handler, errorHandler, res);\n                }\n            }).catch(() => { });\n            Linking.addEventListener(\"url\", (res:any) => {\n                const url = res ? res.url : \"\";\n                if (url.startsWith(`${protocol}://dataUrl`) && !this.isClear) {\n                    this.getFileNames(handler,errorHandler, res.url);\n                }\n            });\n        }else{\n            AppState.addEventListener('change', (status: string) => {\n                if (status === 'active' && !this.isClear) {\n                    this.getFileNames(handler,errorHandler, \"\");\n                }\n              });\n           if(!this.isClear) this.getFileNames(handler,errorHandler, \"\");\n        }\n    }\n\n    clearReceivedFiles(){\n        // this.isClear = true;\n        ReceiveSharingIntent.clearFileNames();\n    }\n\n    \n   protected getFileNames(handler: Function, errorHandler: Function, url: string){\n        if(this.isIos){\n            ReceiveSharingIntent.getFileNames(url).then((data: any)=>{         \n                 let files = this.utils.sortData(data);\n                 \n                 // ignore the files already shared/canceled\n                 // otherwise, 'getFileNames' method will be returning same data again and again\n                 const filesToShare: any = []\n                 for (let file of files) {\n                    const fileName = file.fileName;\n                    if (!this.processedIOSFiles.includes(fileName)) {\n                      filesToShare.push(file);\n                    }\n                    this.processedIOSFiles.push(fileName);\n                 }\n                 console.log(\"[getFileNames]iOS \", {files, filesToShare, processedIOSFiles: this.processedIOSFiles});\n\n                 handler(filesToShare);\n\n            }).catch((e:any)=>errorHandler(e));\n        }else{\n            ReceiveSharingIntent.getFileNames().then((fileObject: any) => {\n                let files = Object.keys(fileObject).map((k) => fileObject[k])\n                handler(files);\n            }).catch((e:any)=>errorHandler(e));\n        }\n    }\n\n    \n}\n\nexport default ReceiveSharingIntentModule;"]}