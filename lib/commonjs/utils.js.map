{"version":3,"sources":["utils.ts"],"names":["Utils","file","replace","fileName","substr","lastIndexOf","ext","getExtension","extension","toLowerCase","type","Object","entries","MimeTypes","find","mime","sortData","data","time","Date","defaultName","toString","objects","filePath","text","weblink","mimeType","contentUri","startsWith","object","files","JSON","parse","i","length","path","obj","getFileName","getMimeType","push","error"],"mappings":";;;;;;;AACA;;;;;;AAEA,MAAMA,KAAN,CAA6B;AAAA;AAAA,yCA+CVC,IAAD,IAAyB;AACnC,aAAOA,IAAI,CAACC,OAAL,CAAa,eAAb,EAA8B,EAA9B,CAAP;AACH,KAjDwB;;AAAA,0CAmDTC,QAAD,IAA6B;AACxC,aAAOA,QAAQ,CAACC,MAAT,CAAgBD,QAAQ,CAACE,WAAT,CAAqB,GAArB,IAA4B,CAA5C,CAAP;AACH,KArDwB;;AAAA,yCAuDVJ,IAAD,IAAyB;AACnC,YAAMK,GAAG,GAAG,KAAKC,YAAL,CAAkBN,IAAlB,CAAZ;AACA,YAAMO,SAAS,GAAG,MAAMF,GAAG,CAACG,WAAJ,EAAxB;AACA,YAAMC,IAAI,GAAGC,MAAM,CAACC,OAAP,CAAeC,kBAAf,EAA0BC,IAA1B,CAA+BC,IAAI,IAAIA,IAAI,CAAC,CAAD,CAAJ,KAAaP,SAApD,CAAb;AACA,UAAIE,IAAJ,EAAS,OAAOA,IAAI,CAAC,CAAD,CAAX;AACT,aAAO,EAAP;AACH,KA7DwB;AAAA;;AAEzBM,EAAAA,QAAQ,CAACC,IAAD,EAAgC;AACpC,UAAMC,IAAU,GAAG,IAAIC,IAAJ,EAAnB;AACA,UAAMC,WAAmB,GAAGF,IAAI,CAACG,QAAL,EAA5B;AACA,UAAMC,OAAoB,GAAG;AAAEC,MAAAA,QAAQ,EAAE,IAAZ;AAAkBC,MAAAA,IAAI,EAAE,IAAxB;AAA8BC,MAAAA,OAAO,EAAE,IAAvC;AAA6CC,MAAAA,QAAQ,EAAE,IAAvD;AAA6DC,MAAAA,UAAU,EAAE,IAAzE;AAA+ExB,MAAAA,QAAQ,EAAEiB,WAAzF;AAAsGZ,MAAAA,SAAS,EAAE;AAAjH,KAA7B;AACA,UAAMP,IAAI,GAAGgB,IAAb;;AACA,QAAIhB,IAAI,CAAC2B,UAAL,CAAgB,OAAhB,CAAJ,EAA8B;AAC1B,YAAMJ,IAAI,GAAGvB,IAAI,CAACC,OAAL,CAAa,OAAb,EAAsB,EAAtB,CAAb;;AACA,UAAIsB,IAAI,CAACI,UAAL,CAAgB,MAAhB,CAAJ,EAA6B;AACzB,cAAMC,MAA0B,GAAG,CAC/B,EAAE,GAAGP,OAAL;AAAcG,UAAAA,OAAO,EAAED;AAAvB,SAD+B,CAAnC;AAGA,eAAOK,MAAP;AACH;;AACD,UAAIA,MAAM,GAAG,CACT,EAAE,GAAGP,OAAL;AAAcE,QAAAA,IAAI,EAAEA;AAApB,OADS,CAAb;AAGA,aAAOK,MAAP;AACH,KAZD,MAYO,IAAI5B,IAAI,CAAC2B,UAAL,CAAgB,SAAhB,CAAJ,EAAgC;AACnC,YAAMH,OAAe,GAAGxB,IAAI,CAACC,OAAL,CAAa,SAAb,EAAwB,EAAxB,CAAxB;AACA,YAAM2B,MAA0B,GAAG,CAC/B,EAAE,GAAGP,OAAL;AAAcG,QAAAA,OAAO,EAAEA;AAAvB,OAD+B,CAAnC;AAGA,aAAOI,MAAP;AACH,KANM,MAMA;AACH,UAAI;AACA,cAAMC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAW/B,IAAX,CAAd;AACA,cAAM4B,MAAM,GAAG,EAAf;;AACA,aAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,KAAK,CAACI,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnC,gBAAME,IAAI,GAAGL,KAAK,CAACG,CAAD,CAAL,CAASE,IAAtB;AACA,gBAAMC,GAAG,GAAG,EACR,GAAGd,OADK;AAERnB,YAAAA,QAAQ,EAAE,KAAKkC,WAAL,CAAiBF,IAAjB,CAFF;AAGR3B,YAAAA,SAAS,EAAE,KAAKD,YAAL,CAAkB4B,IAAlB,CAHH;AAIRT,YAAAA,QAAQ,EAAE,KAAKY,WAAL,CAAiBH,IAAjB,CAJF;AAKRZ,YAAAA,QAAQ,EAAEY;AALF,WAAZ;AAOAN,UAAAA,MAAM,CAACU,IAAP,CAAYH,GAAZ;AACH;;AACD,eAAOP,MAAP;AACH,OAfD,CAeE,OAAOW,KAAP,EAAc;AACZ,eAAO,CAAC,EAAE,GAAGlB;AAAL,SAAD,CAAP;AACH;AACJ;AACJ;;AA7CwB;;eAiEdtB,K","sourcesContent":["import type { IReturnData, IUtils } from \"./ReceiveSharingIntent.interfaces\";\nimport MimeTypes from './mimeTypes';\n\nclass Utils implements IUtils{\n\n    sortData(data: any): Array<IReturnData> {\n        const time: Date = new Date();\n        const defaultName: string = time.toString();\n        const objects: IReturnData = { filePath: null, text: null, weblink: null, mimeType: null, contentUri: null, fileName: defaultName, extension: null };\n        const file = data;\n        if (file.startsWith('text:')) {\n            const text = file.replace(\"text:\", \"\");\n            if (text.startsWith(\"http\")) {\n                const object: Array<IReturnData> = [\n                    { ...objects, weblink: text }\n                ];\n                return object;\n            }\n            let object = [\n                { ...objects, text: text }\n            ];\n            return object;\n        } else if (file.startsWith('webUrl:')) {\n            const weblink: string = file.replace(\"webUrl:\", \"\");\n            const object: Array<IReturnData> = [\n                { ...objects, weblink: weblink }\n            ];\n            return object;\n        } else {\n            try {\n                const files = JSON.parse(file)\n                const object = [];\n                for (let i = 0; i < files.length; i++) {\n                    const path = files[i].path;\n                    const obj = {\n                        ...objects,\n                        fileName: this.getFileName(path),\n                        extension: this.getExtension(path),\n                        mimeType: this.getMimeType(path),\n                        filePath: path\n                    }\n                    object.push(obj);\n                }\n                return object;\n            } catch (error) {\n                return [{ ...objects }];\n            }\n        }\n    }\n\n    getFileName = (file:string): string => {\n        return file.replace(/^.*(\\\\|\\/|\\:)/, '');\n    };\n\n    getExtension = (fileName:string): string => {\n        return fileName.substr(fileName.lastIndexOf('.') + 1);\n    }\n\n    getMimeType = (file:string): string => {\n        const ext = this.getExtension(file);\n        const extension = \".\" + ext.toLowerCase();\n        const type = Object.entries(MimeTypes).find(mime => mime[0] ===  extension)\n        if (type)return type[0];\n        return \"\";\n    }\n\n}\n\nexport default Utils;"]}